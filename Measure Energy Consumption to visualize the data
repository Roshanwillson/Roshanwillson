# Measure Energy Consumption 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings(&quot;ignore&quot;, category=UserWarning)
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score
RED = &quot;\033[91m&quot;
GREEN = &quot;\033[92m&quot;
YELLOW = &quot;\033[93m&quot;
BLUE = &quot;\033[94m&quot;
RESET = &quot;\033[0m&quot;
df = pd.read_csv(&quot;D:/AEP_hourly.csv&quot;)

df[&quot;Datetime&quot;] = pd.to_datetime(df[&quot;Datetime&quot;])
# DATA CLEANING
print(BLUE + &quot;\nDATA CLEANING&quot; + RESET)
# --- Check for missing values
missing_values = df.isnull().sum()
print(GREEN + &quot;Missing Values : &quot; + RESET)
print(missing_values)
# --- Handle missing values
df.dropna(inplace=True)
# --- Check for duplicate values
duplicate_values = df.duplicated().sum()
print(GREEN + &quot;Duplicate Values : &quot; + RESET)
print(duplicate_values)
# --- Drop duplicate values
df.drop_duplicates(inplace=True)
# DATA ANALYSIS
print(BLUE + &quot;\nDATA ANALYSIS&quot; + RESET)
# --- Summary Statistics
summary_stats = df.describe()
print(GREEN + &quot;Summary Statistics : &quot; + RESET)
print(summary_stats)
# SUPPORT VECTOR MODELLLING
print(BLUE + &quot;\nMODELLING&quot; + RESET)
# Reduce the dataset size for faster training
df = df.sample(frac=0.2, random_state=42)
# Split the data into features (Datetime) and target (AEP_MW)
X = df[[&quot;Datetime&quot;]]
y = df[&quot;AEP_MW&quot;]
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
X, y, test_size=0.2, random_state=42)
# Preprocess the features (Datetime) to extract the day of the year
X_train[&quot;DayOfYear&quot;] = X_train[&quot;Datetime&quot;].dt.dayofyear

X_test[&quot;DayOfYear&quot;] = X_test[&quot;Datetime&quot;].dt.dayofyear
# Convert X_train and X_test to NumPy arrays
X_train = X_train[&quot;DayOfYear&quot;].values.reshape(-1, 1)
X_test = X_test[&quot;DayOfYear&quot;].values.reshape(-1, 1)
# Standardize the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
# Create an SVR (Support Vector Regression) model with a linear kernel
svr = SVR(kernel=&quot;linear&quot;, C=1.0)
# Train the SVR model
svr.fit(X_train_scaled, y_train)
# Predict on the test set
y_pred = svr.predict(X_test_scaled)
# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f&quot;Mean Squared Error: {mse}&quot;)
print(f&quot;R-squared: {r2}&quot;)
# Plot the actual vs. predicted values
plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color=&quot;b&quot;, label=&quot;Actual&quot;)
plt.scatter(X_test, y_pred, color=&quot;r&quot;, label=&quot;Predicted&quot;)
plt.xlabel(&quot;Day of the Year&quot;)
plt.ylabel(&quot;Energy Consumption (MW)&quot;)
plt.title(&quot;SVR Model: Actual vs. Predicted&quot;)
plt.legend()
plt.grid()
plt.show()

# DATA VISUALIZATION
print(BLUE + &quot;\nDATA VISUALIZATION&quot; + RESET)
# --- Line plot
print(GREEN + &quot;LinePlot : &quot; + RESET)
plt.figure(figsize=(10, 6))
sns.lineplot(data=df, x=&quot;Datetime&quot;, y=&quot;AEP_MW&quot;)

plt.xlabel(&quot;Datetime&quot;)
plt.ylabel(&quot;Energy Consumption (MW)&quot;)
plt.title(&quot;Energy Consumption Over Year&quot;)
plt.grid()
plt.show()
# --- Histogram
print(GREEN + &quot;Histogram : &quot; + RESET)
plt.figure(figsize=(10, 6))
plt.hist(
df[&quot;AEP_MW&quot;],
bins=100,
histtype=&quot;barstacked&quot;,
edgecolor=&quot;white&quot;,
)
plt.xlabel(&quot;AEPMW&quot;)
plt.ylabel(&quot;Frequency&quot;)
plt.title(&quot;Histogram of MEGAWATT USAGE&quot;)
plt.show()
# SAVING THE FILE
df.to_csv(&quot;D:/AEP_hourly.csv&quot;, index=False)
print(BLUE + &quot;\nDATA ANALYSIS&quot; + RESET)
print(GREEN + &quot;Data Cleaned and Saved !&quot; + RESET)
